  Scope ----
JavaScript Scope is the area where a variable (or function) exists and is accessible. We can layer the scope 
in a system which means the child scope can access the parent scope but not vice-versa.

 Types of scopes ----

(1) Global Scope ---- Those variables which are declared outside the function or blocks or you can say curly
 braces({}) are having a global scope. Global variables can be accessed from anywhere.

The scope of var, let, and const are quite equivalent when declared outside the function.    

(2) Function Scope (local Scope) ---- Those variables that are declared inside a function have local or function
scope which means variables that are declared inside the function are not accessible outside that function.

When declared inside a function, variables declared with var, let, and const look quite similar.

Functions and Objects are also variables in Javascript.


(3) Block Scope ----- Before the ECMA6(2015) we have only global and function scope but when the Let and Const
keywords were introduced in ES6 they provide the block scope.

Variables that are declared inside the { } (curly braces) can only access inside that scope not from the 
outside of it.

Variables declared with var do not have block scope only let and const have block scope.

(4) Lexical Scope ----- The variable is declared inside the function and can only be accessed inside that block or 
nested block is called lexical scope.